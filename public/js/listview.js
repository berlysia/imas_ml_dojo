// Generated by CoffeeScript 1.7.1
var Dojo;

Dojo = (function() {
  function Dojo(dojo) {
    this.userid = dojo.userid;
    this.username = dojo.username;
    this.unitname = dojo.unitname;
    this.level = dojo.level;
    this.dispvalue = dojo.dispvalue;
    this.comment = dojo.comment;
  }

  return Dojo;

})();

Vue.directive('check-current-key', function(value) {
  if (value[0] === value[1]) {
    return this.el.parentNode.classList.add('disabled');
  } else {
    return this.el.parentNode.classList.remove('disabled');
  }
});

$(function() {
  return {
    content: new Vue({
      el: "#content",
      paramAttributes: ['page', 'each_page_length', 'level_bound', 'value_bound', 'order'],
      data: {
        dojos: [],
        page: 0,
        page_max: 0,
        pagenator: [],
        loading: false
      },
      methods: {
        addDojo: function(dojo) {
          var d;
          d = new Dojo(dojo);
          return this.$data.dojos.push(d);
        },
        fetchDojos: function(idx) {
          var url;
          if (this.$data.loading) {
            return;
          }
          this.$data.loading = true;
          url = "/api/getdojos?offset=0&page=" + (parseInt(idx)) + "&length=" + this.each_page_length + "&level_bound=" + this.level_bound + "&value_bound=" + this.value_bound + "&order=" + this.order;
          console.log(url);
          return $.getJSON(url, (function(_this) {
            return function(dojos) {
              _this.$data.dojos = dojos.map(function(dojo) {
                return new Dojo(dojo);
              });
              return _this.$data.loading = false;
            };
          })(this)).fail(function(xhr, stat, err) {
            return this.$data.loading = false;
          });
        },
        listPagenation: function(idx) {
          if (parseInt(idx) === this.$data.page) {
            return;
          }
          this.$data.page = parseInt(idx);
          this.updatePagenator(idx);
          return this.fetchDojos(idx);
        },
        updatePagenator: function(idx) {
          var i, pagenator, _i, _ref;
          if (this.$data.page_max < 5) {
            this.pg_from = 0;
            this.pg_size = this.$data.page_max + 1;
          } else if (this.$data.page < 3) {
            this.pg_from = 0;
            this.pg_size = 5;
          } else if (this.$data.page_max - 2 < this.$data.page) {
            this.pg_from = this.$data.page_max - 4;
            this.pg_size = 5;
          } else {
            this.pg_from = this.$data.page - 2;
            this.pg_size = 5;
          }
          pagenator = [];
          for (i = _i = 0, _ref = this.pg_size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            pagenator.push(this.pg_from + i);
          }
          return this.$data.pagenator = pagenator;
        },
        onPagenatorClick: function(idx, evt, toTop) {
          evt.preventDefault();
          this.listPagenation(idx);
          window.history.pushState('', '', "/list?page=" + idx);
          if (toTop) {
            return $('body').animate({
              scrollTop: 0
            }, 0);
          }
        }
      },
      created: function() {
        var url;
        this.$data.page = parseInt(this.page);
        url = "/api/getdojos?offset=0&length=" + this.each_page_length + "&level_bound=" + this.level_bound + "&value_bound=" + this.value_bound + "&order=" + this.order + "&page_max=true";
        return $.getJSON(url, (function(_this) {
          return function(page_max) {
            _this.$data.page_max = parseInt(page_max);
            _this.updatePagenator(_this.$data.page);
            return _this.fetchDojos(_this.$data.page);
          };
        })(this)).fail(function(xhr, stat, err) {});
      }
    })
  };
});
